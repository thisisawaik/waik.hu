# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  push:
    branches: [master]

env:
  PROJECT_ID: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ZAL1000.project }}
  GKE_CLUSTER: cluster-1 # TODO: update to cluster name
  GKE_ZONE: us-central1-c # TODO: update to cluster zone
  DEPLOYMENT_NAME: waik-main-site # TODO: update to deployment name
  IMAGE: waik/website/ssr

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Python setup
        uses: actions/setup-python@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ZAL1000 }}
          project_id: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ZAL1000.project }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ZAL1000 }}

      # Build the Docker image
      - name: Build
        run: |-
          cd web
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

      # Modify deploy file
      - name: Modify deploy file
        run: |-
          pip install ruamel.yaml
          python ./helper/subst.py REPLACE_IMAGE gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE }}:$GITHUB_SHA ./kubernetes/website-deploy.yaml

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE}} --project ${{ env.PROJECT_ID }}
          kubectl apply -f ./kubernetes/website-deploy.yaml

        # sed 's/REPLACE_IMAGE/gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE }}:$GITHUB_SHA/' < ./kubernetes/deploy.yaml

#    - name: Wait 30s for deployment
#      run: sleep 30s
#      shell: bash
#
#    - name: Check deployment status
#      run: |-
#        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
#
#    - name: Undo deployment if status error
#      if: ! kubectl rollout status deployment ${{ env.DEPLOYMENT_NAME }}
#      run: |-
#        kubectl rollout undo deployment ${{ env.DEPLOYMENT_NAME }}
#        kubectl rollout status deployment myapp
#        exit 1
